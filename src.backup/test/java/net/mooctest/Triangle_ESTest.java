/*
 * This file was automatically generated by EvoSuite
 * Sun Sep 15 09:05:46 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.mooctest.Triangle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Triangle_ESTest extends Triangle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void teste00()  throws Throwable  {
      Triangle triangle0 = new Triangle(9223372036854775807L, 9223372036854775807L, 9223372036854775807L);
      triangle0.lborderB = 9223372036854775807L;
      triangle0.lborderB = 1140L;
      long[] longArray0 = triangle0.getBorders();
      assertArrayEquals(new long[] {9223372036854775807L, 1140L, 9223372036854775807L}, longArray0);
  }

  @Test(timeout = 4000)
  public void teste01()  throws Throwable  {
      Triangle triangle0 = new Triangle(2531L, 2531L, 4308L);
      Triangle triangle1 = new Triangle(2531L, 2306L, 1957L);
      String string0 = triangle0.getType(triangle1);
      assertEquals("Scalene", string0);
  }

  @Test(timeout = 4000)
  public void teste02()  throws Throwable  {
      Triangle triangle0 = new Triangle(542L, 1934L, 2343L);
      Triangle triangle1 = new Triangle(2343L, 2343L, 3074L);
      String string0 = triangle0.getType(triangle1);
      assertEquals("Isosceles", string0);
  }

  @Test(timeout = 4000)
  public void teste03()  throws Throwable  {
      Triangle triangle0 = new Triangle(9223372036854775807L, 9223372036854775807L, 9223372036854775807L);
      Triangle triangle1 = new Triangle(9223372036854775807L, 9223372036854775807L, 9223372036854775807L);
      triangle1.lborderA = 9223372036854775807L;
      triangle1.lborderA = 3700L;
      String string0 = triangle1.getType(triangle0);
      assertEquals("Regular", string0);
  }

  @Test(timeout = 4000)
  public void teste04()  throws Throwable  {
      Triangle triangle0 = new Triangle(1L, 1L, 1L);
      Triangle triangle1 = new Triangle(1L, 2297L, 0L);
      String string0 = triangle1.getType(triangle0);
      assertEquals("Regular", string0);
  }

  @Test(timeout = 4000)
  public void teste05()  throws Throwable  {
      Triangle triangle0 = new Triangle(542L, 1934L, 2343L);
      Triangle triangle1 = new Triangle(2343L, 2343L, 3074L);
      triangle1.lborderB = 731L;
      String string0 = triangle0.getType(triangle1);
      assertEquals("Illegal", string0);
  }

  @Test(timeout = 4000)
  public void teste06()  throws Throwable  {
      Triangle triangle0 = new Triangle((-1L), 0L, 0L);
      Triangle triangle1 = new Triangle(2174L, 1L, 0L);
      String string0 = triangle0.getType(triangle1);
      assertEquals("Illegal", string0);
  }

  @Test(timeout = 4000)
  public void teste07()  throws Throwable  {
      Triangle triangle0 = new Triangle(2095L, 2095L, 2095L);
      Triangle triangle1 = new Triangle(2095L, 0L, 0L);
      String string0 = triangle0.getType(triangle1);
      assertEquals("Illegal", string0);
  }

  @Test(timeout = 4000)
  public void teste08()  throws Throwable  {
      Triangle triangle0 = new Triangle(0L, 0L, (-2161L));
      boolean boolean0 = triangle0.isTriangle(triangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void teste09()  throws Throwable  {
      Triangle triangle0 = new Triangle(3558L, 3558L, 3558L);
      long long0 = triangle0.diffOfBorders((-1L), 9223372036854775807L);
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void teste10()  throws Throwable  {
      Triangle triangle0 = new Triangle(0L, 676L, 0L);
      // Undeclared exception!
      try { 
        triangle0.isTriangle((Triangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Triangle", e);
      }
  }

  @Test(timeout = 4000)
  public void teste11()  throws Throwable  {
      Triangle triangle0 = new Triangle((-791L), (-791L), 2830L);
      // Undeclared exception!
      try { 
        triangle0.getType((Triangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Triangle", e);
      }
  }

  @Test(timeout = 4000)
  public void teste12()  throws Throwable  {
      Triangle triangle0 = new Triangle(9223372036854775807L, 1867L, 9223372036854775807L);
      long long0 = triangle0.diffOfBorders(0L, (-303L));
      assertEquals(303L, long0);
  }

  @Test(timeout = 4000)
  public void teste13()  throws Throwable  {
      Triangle triangle0 = new Triangle(9223372036854775807L, 9223372036854775807L, 9223372036854775807L);
      long long0 = triangle0.diffOfBorders(3700L, 3700L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void teste14()  throws Throwable  {
      Triangle triangle0 = new Triangle(0L, 0L, 1774L);
      Triangle triangle1 = new Triangle(1780L, 1L, 377L);
      boolean boolean0 = triangle0.isTriangle(triangle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void teste15()  throws Throwable  {
      Triangle triangle0 = new Triangle(672L, 672L, 672L);
      Triangle triangle1 = new Triangle(672L, (-3137L), (-3137L));
      boolean boolean0 = triangle0.isTriangle(triangle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void teste16()  throws Throwable  {
      Triangle triangle0 = new Triangle(927L, 927L, 927L);
      Triangle triangle1 = new Triangle((-2343L), 927L, 927L);
      boolean boolean0 = triangle0.isTriangle(triangle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void teste17()  throws Throwable  {
      Triangle triangle0 = new Triangle(542L, 1915L, 2343L);
      String string0 = triangle0.getType(triangle0);
      assertEquals("Scalene", string0);
  }

  @Test(timeout = 4000)
  public void teste18()  throws Throwable  {
      Triangle triangle0 = new Triangle(26L, 26L, 26L);
      Triangle triangle1 = new Triangle(26L, 26L, 1984L);
      triangle1.lborderB = 1984L;
      String string0 = triangle0.getType(triangle1);
      assertEquals("Isosceles", string0);
  }

  @Test(timeout = 4000)
  public void teste19()  throws Throwable  {
      Triangle triangle0 = new Triangle(542L, 1915L, 2343L);
      Triangle triangle1 = new Triangle(2343L, 2343L, 542L);
      String string0 = triangle0.getType(triangle1);
      assertEquals("Isosceles", string0);
  }

  @Test(timeout = 4000)
  public void teste20()  throws Throwable  {
      Triangle triangle0 = new Triangle(1131L, 1131L, 1131L);
      Triangle triangle1 = new Triangle(1L, 1131L, 1131L);
      triangle1.lborderB = 1131L;
      triangle1.lborderB = 1131L;
      triangle1.lborderA = 1131L;
      triangle1.lborderB = 1L;
      String string0 = triangle0.getType(triangle1);
      assertEquals("Isosceles", string0);
  }

  @Test(timeout = 4000)
  public void teste21()  throws Throwable  {
      Triangle triangle0 = new Triangle(9223372036854775807L, 9223372036854775807L, 9223372036854775807L);
      Triangle triangle1 = new Triangle(9223372036854775807L, 9223372036854775807L, 9223372036854775807L);
      triangle1.lborderB = 9223372036854775807L;
      triangle1.lborderA = 9223372036854775807L;
      triangle1.lborderB = 1140L;
      triangle1.lborderA = 1140L;
      boolean boolean0 = triangle0.isTriangle(triangle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void teste22()  throws Throwable  {
      Triangle triangle0 = new Triangle(9223372036854775807L, 9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = triangle0.isTriangle(triangle0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void teste23()  throws Throwable  {
      Triangle triangle0 = new Triangle(9223372036854775807L, (-733L), (-733L));
      Triangle triangle1 = new Triangle(9223372036854775807L, 1L, 9223372036854775807L);
      triangle1.lborderC = (-733L);
      boolean boolean0 = triangle0.isTriangle(triangle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void teste24()  throws Throwable  {
      Triangle triangle0 = new Triangle(9223372036854775807L, (-733L), (-733L));
      Triangle triangle1 = new Triangle(9223372036854775807L, 1L, 9223372036854775807L);
      String string0 = triangle0.getType(triangle1);
      //  // Unstable assertion: assertEquals("Illegal", string0);
  }

  @Test(timeout = 4000)
  public void teste25()  throws Throwable  {
      Triangle triangle0 = new Triangle(9223372036854775807L, (-733L), (-733L));
      long[] longArray0 = triangle0.getBorders();
      assertArrayEquals(new long[] {9223372036854775807L, (-733L), (-733L)}, longArray0);
  }
}
